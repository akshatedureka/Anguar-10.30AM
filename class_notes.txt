Introduction to Angular
***********************
	- Angular is the framework.

	- Angular is the JavaScript Framework.

	- Framework Containes Predefined Functionalities.

	- to use Predefined Functionalities, we should follow Rules & Regulations.

		Ex.

			MVC

			M - Model

			V - View

			C - Controller / Component

	- Angular Released By Google.

	- Angular Categorized into 3 flavours

		1) AngularJS

		2) Angular2

		3) Angular Material

	- AngularJS, used to develop the web applications

	- we will  develop AngularJS Applications with the help of JavaScript
	
	- JavaScript is the Scripting Language and Object Based.

	- Angular2, used to build the web applications and mobile applications

	- Current Version of Angular2 is Angular13.

	- Angular13 Applications we will develop by using TypeScript.

	- TypeScript is the Programming Language, and follows the OOPS. and released by Microsoft.

	- Angular Material, used to apply the Rich UI to both web applications and mobile applications.

	- Angular Applications are Component Based.

	- Because Of Components, Code Reusability is High and Modularity Incresed in Angular Applications.
	
	- we will save TypeScript files with ".ts" extension.

	- Visual Studio Code is Suggestable IDE, to build the Angular Applications.

	- Visual Studio Code also called as VSCode.

	- VSCode is the Open Source IDE and Released By Microsoft.

	- Angular Installation depending on npm tool

	- npm stands for node packaging manager.

	- npm present in NodeJS.

	- we will download 3rd party libraries with the help of yarn tool

	- yarn tool given by facebook.

	- In general, browsers won't understand TypeScript.

	- So, we need to convert TypeScript to Equalent JavaScript.

	- Conversion of TypeScript to Equalent JavaScript called as Transpilation
	
	- "polyfills.js" is the library, helps to perform the Transpilation

	- "polyfills.js" is the inbuilt library in Angular Framework.

	- Angular follows the MVC Design Pattern.

		M - Model

		V - View

		C - Component

	- variables behaves like Model.

	Ex.
		var data = "data from mongodb database soon";


	- where "data" is the model.

	- we can use HTML,HTML5, Python, PERL,.....as View in Angular

	- classes behaves like Component in Angular.

	Ex.

		class class_one{

		}

	where "class_one" is the Component in angular



Software Installations
**********************

1) download and install NodeJS


	website : https://nodejs.org/en/download/

	file    : node-v16.13.1-x64.msi



2) install yarn tool.

	yarn tool given by facebook.

	yarn tool, used to download the 3rd party libraries

	yarn tool, installation is command based installation


	> npm install -g yarn

	"-g" stands for global installation


3) install angular

	angular installation also command based installation

	> npm install -g @angular/cli

	cli stands for command line interface

	cli is the tool

	cli tool provided by google

	cli tool helps to create and execute the angular applications.	




4) link the yarn tool cli tool

	> ng config --global cli.packageManager yarn


5) download and install Visual Studio Code

	website : https://code.visualstudio.com/docs/?dv=win

	file    : VSCodeUserSetup-x64-1.63.2.exe




create the first angular application
************************************

1) create the directory

	Ex.
		Angular-10.30AM


2) open above directory with VSCode


3) create the angular application

	> ng new firstApp


	where "firstApp" is the name of the angular application


4) switch to angular application


	> cd firstApp


5) execute the angular application

	> ng s -o

	"s" stands for serve

	"-o" stands for open the default browser

	Default Port Number of Angular Application is "4200"


	we can change port number also


Directory Structure of Angular Application
******************************************

1) node_modules

	- node_modules containes libraries.

	- these libraries helps to execute the angular application.



2) src/app

	- all our components we should deploy in src/app folder.


3) src/app/app.component.ts
	   app.component.html
           app.component.css
           app.component.spec.ts

	- when ever we create the angular application automatically AppComponent the default Component

4) src/app/app.module.ts

	app.module.ts file called as registration file

	app.module.ts file called as default module file

	as a developer, we are developing more components

	in general, our components executed by angular framework

	to make availability of our components to angular framework, we must register in app.module.ts file




5) src/assets

	- used to deploy the static resources.

	Ex.
		images

		logos

		xml files

		text files

		json files

		---
		---
		---



6) src/environment

	in general, we have two types of environments

	1) development environment

	2) production environment


	src/evnironment/environment.ts

	used to configure the development related information

	src/environment/environment.prod.ts

	used to configure the production related information




7) src/favicon.ico

	- this is the default logo of angular framework

8) src/index.html

	- index.html file called as main template

	- angular framework starts the execution from index.html file

	- when ever we execute the angular application immidiately index.html file will execute

	- index.html file immidiately executes the "main.ts" file

	- "main.ts" file immidiately executes the "app.module.ts" file

	- "app.module.ts" file containes components, services, directives and pipes information

	- based on registration file, our components will execute and output will be rendered in index.html file




8) src/main.ts

	main.ts file acting as interface between index.html and app.module.ts file




9) src/polyfills.ts

	polyfills.ts file acting as library file

	polyfills.ts file automatically performs the transpilation
	
	converting typescript code to equalent javascript code called as transpilation



10) src/styles.css

	we can define global styles

	these styles applicable to entire angular project


11) src/test.ts

	this is the default testing of app.module.ts file




12) .browserslistrc

	- it containes supporting browsers information.


Component
*********
	- Reusable Portion of complex UI Called as Component.

	- we can create more than one component

	- we can include one component to another component also

	- we can provide communication between components

	- angular applications are component based applications

	- Because of components code Reusability is high in angular

	- in general, we will deploy our components in src/app folder

	- after deploying the component we should register in app.module.ts file


******************************************
component-app
			src
			   app
			   	  first.component.ts
				  first.component.html

				  app.module.ts
			   index.html
******************************************


***************************************************************
multi-components-app
				   src
				     app
					 	header.component.ts
						 header.component.html

						 body.component.ts
						 body.component.html

						 footer.component.ts
						 footer.component.html

						 main.component.ts
						 main.component.html

						 app.module.ts
					 index.html
****************************************************************



MEAN Stack Application
***********************

M - MongoDB

E - ExpressJS

A - Angular

N - NodeJS

	MongoDB is "database"

	Angular is "frontend"

	NodeJS is "backend"

	ExpressJS used to develop the "rest api's"


1) deploy images to aws server s3 bucket

	aws stands for amazon web services

	aws is cloud server

	aws server providing s3 bucket server

	s3 bucket, used to deploy the static resources

	Ex.
		images
		audio files
		video files
		xml files
		json files
		---
		---
		---


	=> create aws account

	url : https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Ffromtb%3Dtrue%26hashArgs%3D%2523%26isauthcode%3Dtrue%26nc2%3Dh_ct%26src%3Dheader-signin%26state%3DhashArgsFromTB_us-east-1_858e6f657b3f88e7&client_id=arn%3Aaws%3Asignin%3A%3A%3Aconsole%2Fcanvas&forceMobileApp=0&code_challenge=CsBRkZo8nINMNTbz-INSC5WNsxNhTM3wjSh8LEHnBSs&code_challenge_method=SHA-256




	=> login into aws account


Image URLS
**********

https://ngmrnbatch.s3.us-east-2.amazonaws.com/p1.jpg?response-content-disposition=inline&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCmFwLXNvdXRoLTEiSDBGAiEAr%2FxwWU74w9B9u%2Fbt%2BYCg8W6WReu1xF0Z52FzI%2BPZ3eUCIQDXb7U64YprKTxepuayBmSIjc%2B%2BCa0aXFG8%2BMqBM3fKoir%2FAgif%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDM0OTYwNTQxMTAwNCIMyQ5Q7NbPmCLsDpRkKtMC0y45dpvRsahKGutpvYjXiY%2B2yNZB7j8boas8QAesBdryhrf5%2BkoruurUPRPyoOspb%2FZMn%2ForU80kKOu%2Bf9svwzOSQVQvBR%2Fi0xLkphaC%2B0aMxKs6V5HkdEMGzvv8JN7EMnFrJ8%2BtM3AwRi0MYZkFphVze7ZR9%2FAJcj56AxgVjwvt76npR0SieyXev%2FczgDX%2F2yYNJvR4N3P6JH89nMOrhdy2AYGAVn3zOwyL6JZwuiTODPsgUnCyWO5EprDVkGA8qhVddjLWjVAL5bGfCeGUObBmPcY%2BJZ8i2QUjzJCUkOixFPqgmpWp0fezhTg%2B%2Bz%2FNNny5qy%2F7nwCVTZ%2BurDtSY%2BXYTNMvgiHrcSO4IL16s7wMePyHGK70CdUhGOfKk9bZ3oZDyS257kPVMvjxNlG668thZLspnTfJ%2FDmaj4FbSKyZkZUsPgPFFkpM3a3xoffbOzOQMKidpY4GOrICXL6Y98H4u1B1dfpkesmwIT16nX%2F45xSYz9cUueODaY8dN0r9ZvNC15%2BNr%2BAZNftqeCKVTIBYljOx%2B8JFPRomaBzDrK3GFxDgMjc7aNbkS1X4Idbicv4%2BMuqZXKGQ9s5kkNzm6O1GwBYmHGWYpFh0%2FiZKmPq06MMTiKPZALn7CYYzcDYei9xTe5DVXGdu4mF5mncA6gSkf03CYXhKajMjMo1Qn13uCUakGvtbbkFFO1M6HWhv0tU6As%2Bvm2ZFqQLh6YsawAnTo6KvzVHwjg2%2F%2BGehTy0MEEzdnCPETMQkcTsRsIbEQZYOIyJUCzf5kHbAMb3b3PCGSKPQMZ8zgcapteTXkUOvqal0CtwX5TBwmENT%2B7vj%2FpuIYa1xTkByJr22zWRuDXTALOSEf9CXpBJt3K1p&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20211227T053238Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAVCZQ3HC6GANAXFZQ%2F20211227%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=ecff31f0ebc4048b35b61828cae8287fd8e92ad1c203e4ed9bb742bfa502abdb

https://ngmrnbatch.s3.us-east-2.amazonaws.com/p2.jpg?response-content-disposition=inline&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCmFwLXNvdXRoLTEiSDBGAiEAr%2FxwWU74w9B9u%2Fbt%2BYCg8W6WReu1xF0Z52FzI%2BPZ3eUCIQDXb7U64YprKTxepuayBmSIjc%2B%2BCa0aXFG8%2BMqBM3fKoir%2FAgif%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDM0OTYwNTQxMTAwNCIMyQ5Q7NbPmCLsDpRkKtMC0y45dpvRsahKGutpvYjXiY%2B2yNZB7j8boas8QAesBdryhrf5%2BkoruurUPRPyoOspb%2FZMn%2ForU80kKOu%2Bf9svwzOSQVQvBR%2Fi0xLkphaC%2B0aMxKs6V5HkdEMGzvv8JN7EMnFrJ8%2BtM3AwRi0MYZkFphVze7ZR9%2FAJcj56AxgVjwvt76npR0SieyXev%2FczgDX%2F2yYNJvR4N3P6JH89nMOrhdy2AYGAVn3zOwyL6JZwuiTODPsgUnCyWO5EprDVkGA8qhVddjLWjVAL5bGfCeGUObBmPcY%2BJZ8i2QUjzJCUkOixFPqgmpWp0fezhTg%2B%2Bz%2FNNny5qy%2F7nwCVTZ%2BurDtSY%2BXYTNMvgiHrcSO4IL16s7wMePyHGK70CdUhGOfKk9bZ3oZDyS257kPVMvjxNlG668thZLspnTfJ%2FDmaj4FbSKyZkZUsPgPFFkpM3a3xoffbOzOQMKidpY4GOrICXL6Y98H4u1B1dfpkesmwIT16nX%2F45xSYz9cUueODaY8dN0r9ZvNC15%2BNr%2BAZNftqeCKVTIBYljOx%2B8JFPRomaBzDrK3GFxDgMjc7aNbkS1X4Idbicv4%2BMuqZXKGQ9s5kkNzm6O1GwBYmHGWYpFh0%2FiZKmPq06MMTiKPZALn7CYYzcDYei9xTe5DVXGdu4mF5mncA6gSkf03CYXhKajMjMo1Qn13uCUakGvtbbkFFO1M6HWhv0tU6As%2Bvm2ZFqQLh6YsawAnTo6KvzVHwjg2%2F%2BGehTy0MEEzdnCPETMQkcTsRsIbEQZYOIyJUCzf5kHbAMb3b3PCGSKPQMZ8zgcapteTXkUOvqal0CtwX5TBwmENT%2B7vj%2FpuIYa1xTkByJr22zWRuDXTALOSEf9CXpBJt3K1p&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20211227T053359Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAVCZQ3HC6GANAXFZQ%2F20211227%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=201ed106a80eb21f41157ede02dcbd479e7ed6ec28b29841a66171a8034f8d9d

https://ngmrnbatch.s3.us-east-2.amazonaws.com/p3.jpg?response-content-disposition=inline&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCmFwLXNvdXRoLTEiSDBGAiEAr%2FxwWU74w9B9u%2Fbt%2BYCg8W6WReu1xF0Z52FzI%2BPZ3eUCIQDXb7U64YprKTxepuayBmSIjc%2B%2BCa0aXFG8%2BMqBM3fKoir%2FAgif%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDM0OTYwNTQxMTAwNCIMyQ5Q7NbPmCLsDpRkKtMC0y45dpvRsahKGutpvYjXiY%2B2yNZB7j8boas8QAesBdryhrf5%2BkoruurUPRPyoOspb%2FZMn%2ForU80kKOu%2Bf9svwzOSQVQvBR%2Fi0xLkphaC%2B0aMxKs6V5HkdEMGzvv8JN7EMnFrJ8%2BtM3AwRi0MYZkFphVze7ZR9%2FAJcj56AxgVjwvt76npR0SieyXev%2FczgDX%2F2yYNJvR4N3P6JH89nMOrhdy2AYGAVn3zOwyL6JZwuiTODPsgUnCyWO5EprDVkGA8qhVddjLWjVAL5bGfCeGUObBmPcY%2BJZ8i2QUjzJCUkOixFPqgmpWp0fezhTg%2B%2Bz%2FNNny5qy%2F7nwCVTZ%2BurDtSY%2BXYTNMvgiHrcSO4IL16s7wMePyHGK70CdUhGOfKk9bZ3oZDyS257kPVMvjxNlG668thZLspnTfJ%2FDmaj4FbSKyZkZUsPgPFFkpM3a3xoffbOzOQMKidpY4GOrICXL6Y98H4u1B1dfpkesmwIT16nX%2F45xSYz9cUueODaY8dN0r9ZvNC15%2BNr%2BAZNftqeCKVTIBYljOx%2B8JFPRomaBzDrK3GFxDgMjc7aNbkS1X4Idbicv4%2BMuqZXKGQ9s5kkNzm6O1GwBYmHGWYpFh0%2FiZKmPq06MMTiKPZALn7CYYzcDYei9xTe5DVXGdu4mF5mncA6gSkf03CYXhKajMjMo1Qn13uCUakGvtbbkFFO1M6HWhv0tU6As%2Bvm2ZFqQLh6YsawAnTo6KvzVHwjg2%2F%2BGehTy0MEEzdnCPETMQkcTsRsIbEQZYOIyJUCzf5kHbAMb3b3PCGSKPQMZ8zgcapteTXkUOvqal0CtwX5TBwmENT%2B7vj%2FpuIYa1xTkByJr22zWRuDXTALOSEf9CXpBJt3K1p&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20211227T053440Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAVCZQ3HC6GANAXFZQ%2F20211227%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=4a430cb1d371b44e387313b4669f9fdb8183edb1ac904a9da59302e21ad225c0

https://ngmrnbatch.s3.us-east-2.amazonaws.com/p4.jpg?response-content-disposition=inline&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCmFwLXNvdXRoLTEiSDBGAiEAr%2FxwWU74w9B9u%2Fbt%2BYCg8W6WReu1xF0Z52FzI%2BPZ3eUCIQDXb7U64YprKTxepuayBmSIjc%2B%2BCa0aXFG8%2BMqBM3fKoir%2FAgif%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDM0OTYwNTQxMTAwNCIMyQ5Q7NbPmCLsDpRkKtMC0y45dpvRsahKGutpvYjXiY%2B2yNZB7j8boas8QAesBdryhrf5%2BkoruurUPRPyoOspb%2FZMn%2ForU80kKOu%2Bf9svwzOSQVQvBR%2Fi0xLkphaC%2B0aMxKs6V5HkdEMGzvv8JN7EMnFrJ8%2BtM3AwRi0MYZkFphVze7ZR9%2FAJcj56AxgVjwvt76npR0SieyXev%2FczgDX%2F2yYNJvR4N3P6JH89nMOrhdy2AYGAVn3zOwyL6JZwuiTODPsgUnCyWO5EprDVkGA8qhVddjLWjVAL5bGfCeGUObBmPcY%2BJZ8i2QUjzJCUkOixFPqgmpWp0fezhTg%2B%2Bz%2FNNny5qy%2F7nwCVTZ%2BurDtSY%2BXYTNMvgiHrcSO4IL16s7wMePyHGK70CdUhGOfKk9bZ3oZDyS257kPVMvjxNlG668thZLspnTfJ%2FDmaj4FbSKyZkZUsPgPFFkpM3a3xoffbOzOQMKidpY4GOrICXL6Y98H4u1B1dfpkesmwIT16nX%2F45xSYz9cUueODaY8dN0r9ZvNC15%2BNr%2BAZNftqeCKVTIBYljOx%2B8JFPRomaBzDrK3GFxDgMjc7aNbkS1X4Idbicv4%2BMuqZXKGQ9s5kkNzm6O1GwBYmHGWYpFh0%2FiZKmPq06MMTiKPZALn7CYYzcDYei9xTe5DVXGdu4mF5mncA6gSkf03CYXhKajMjMo1Qn13uCUakGvtbbkFFO1M6HWhv0tU6As%2Bvm2ZFqQLh6YsawAnTo6KvzVHwjg2%2F%2BGehTy0MEEzdnCPETMQkcTsRsIbEQZYOIyJUCzf5kHbAMb3b3PCGSKPQMZ8zgcapteTXkUOvqal0CtwX5TBwmENT%2B7vj%2FpuIYa1xTkByJr22zWRuDXTALOSEf9CXpBJt3K1p&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20211227T053504Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAVCZQ3HC6GANAXFZQ%2F20211227%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=c0cce7967c5248229b417f1d3d2120f5d193572a1f95d095dd416910521822d3

https://ngmrnbatch.s3.us-east-2.amazonaws.com/p5.jpg?response-content-disposition=inline&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCmFwLXNvdXRoLTEiSDBGAiEAr%2FxwWU74w9B9u%2Fbt%2BYCg8W6WReu1xF0Z52FzI%2BPZ3eUCIQDXb7U64YprKTxepuayBmSIjc%2B%2BCa0aXFG8%2BMqBM3fKoir%2FAgif%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDM0OTYwNTQxMTAwNCIMyQ5Q7NbPmCLsDpRkKtMC0y45dpvRsahKGutpvYjXiY%2B2yNZB7j8boas8QAesBdryhrf5%2BkoruurUPRPyoOspb%2FZMn%2ForU80kKOu%2Bf9svwzOSQVQvBR%2Fi0xLkphaC%2B0aMxKs6V5HkdEMGzvv8JN7EMnFrJ8%2BtM3AwRi0MYZkFphVze7ZR9%2FAJcj56AxgVjwvt76npR0SieyXev%2FczgDX%2F2yYNJvR4N3P6JH89nMOrhdy2AYGAVn3zOwyL6JZwuiTODPsgUnCyWO5EprDVkGA8qhVddjLWjVAL5bGfCeGUObBmPcY%2BJZ8i2QUjzJCUkOixFPqgmpWp0fezhTg%2B%2Bz%2FNNny5qy%2F7nwCVTZ%2BurDtSY%2BXYTNMvgiHrcSO4IL16s7wMePyHGK70CdUhGOfKk9bZ3oZDyS257kPVMvjxNlG668thZLspnTfJ%2FDmaj4FbSKyZkZUsPgPFFkpM3a3xoffbOzOQMKidpY4GOrICXL6Y98H4u1B1dfpkesmwIT16nX%2F45xSYz9cUueODaY8dN0r9ZvNC15%2BNr%2BAZNftqeCKVTIBYljOx%2B8JFPRomaBzDrK3GFxDgMjc7aNbkS1X4Idbicv4%2BMuqZXKGQ9s5kkNzm6O1GwBYmHGWYpFh0%2FiZKmPq06MMTiKPZALn7CYYzcDYei9xTe5DVXGdu4mF5mncA6gSkf03CYXhKajMjMo1Qn13uCUakGvtbbkFFO1M6HWhv0tU6As%2Bvm2ZFqQLh6YsawAnTo6KvzVHwjg2%2F%2BGehTy0MEEzdnCPETMQkcTsRsIbEQZYOIyJUCzf5kHbAMb3b3PCGSKPQMZ8zgcapteTXkUOvqal0CtwX5TBwmENT%2B7vj%2FpuIYa1xTkByJr22zWRuDXTALOSEf9CXpBJt3K1p&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20211227T053522Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAVCZQ3HC6GANAXFZQ%2F20211227%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=efa752acb5a6b1df269fdb6759d98cb61f211fe61b8c82535cebb55b1d8a6c7a

https://ngmrnbatch.s3.us-east-2.amazonaws.com/p6.jpg?response-content-disposition=inline&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCmFwLXNvdXRoLTEiSDBGAiEAr%2FxwWU74w9B9u%2Fbt%2BYCg8W6WReu1xF0Z52FzI%2BPZ3eUCIQDXb7U64YprKTxepuayBmSIjc%2B%2BCa0aXFG8%2BMqBM3fKoir%2FAgif%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDM0OTYwNTQxMTAwNCIMyQ5Q7NbPmCLsDpRkKtMC0y45dpvRsahKGutpvYjXiY%2B2yNZB7j8boas8QAesBdryhrf5%2BkoruurUPRPyoOspb%2FZMn%2ForU80kKOu%2Bf9svwzOSQVQvBR%2Fi0xLkphaC%2B0aMxKs6V5HkdEMGzvv8JN7EMnFrJ8%2BtM3AwRi0MYZkFphVze7ZR9%2FAJcj56AxgVjwvt76npR0SieyXev%2FczgDX%2F2yYNJvR4N3P6JH89nMOrhdy2AYGAVn3zOwyL6JZwuiTODPsgUnCyWO5EprDVkGA8qhVddjLWjVAL5bGfCeGUObBmPcY%2BJZ8i2QUjzJCUkOixFPqgmpWp0fezhTg%2B%2Bz%2FNNny5qy%2F7nwCVTZ%2BurDtSY%2BXYTNMvgiHrcSO4IL16s7wMePyHGK70CdUhGOfKk9bZ3oZDyS257kPVMvjxNlG668thZLspnTfJ%2FDmaj4FbSKyZkZUsPgPFFkpM3a3xoffbOzOQMKidpY4GOrICXL6Y98H4u1B1dfpkesmwIT16nX%2F45xSYz9cUueODaY8dN0r9ZvNC15%2BNr%2BAZNftqeCKVTIBYljOx%2B8JFPRomaBzDrK3GFxDgMjc7aNbkS1X4Idbicv4%2BMuqZXKGQ9s5kkNzm6O1GwBYmHGWYpFh0%2FiZKmPq06MMTiKPZALn7CYYzcDYei9xTe5DVXGdu4mF5mncA6gSkf03CYXhKajMjMo1Qn13uCUakGvtbbkFFO1M6HWhv0tU6As%2Bvm2ZFqQLh6YsawAnTo6KvzVHwjg2%2F%2BGehTy0MEEzdnCPETMQkcTsRsIbEQZYOIyJUCzf5kHbAMb3b3PCGSKPQMZ8zgcapteTXkUOvqal0CtwX5TBwmENT%2B7vj%2FpuIYa1xTkByJr22zWRuDXTALOSEf9CXpBJt3K1p&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20211227T053603Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAVCZQ3HC6GANAXFZQ%2F20211227%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=ebec35116fa2dba5aa41bcba3d94b3c7f3b9a7702c972f09fd1f751f58397100


store the images location in mongodb database
*********************************************

	- mongodb is the database

	- mongodb is NoSQL database

	- mongodb database supports the JSON

	- mongodb database is light weight database

	- mongodb database provides the cloud environment in the form of mongodb atlas


				SQL											NoSQL

Ex.
		Oracle												MongoDB

		MySQL												CassandraDB

		SQLServer


		databases											databases

		tables												collections

		records												document

		primary key											_id




=> create the mongodb atlas account

	URL : https://www.mongodb.com/cloud/atlas/efficiency?utm_source=google&utm_campaign=gs_apac_india_search_core_brand_atlas_desktop&utm_term=mongodb%20atlas%20login&utm_medium=cpc_paid_search&utm_ad=e&utm_ad_campaign_id=12212624347&adgroup=115749713263&gclid=Cj0KCQiAwqCOBhCdARIsAEPyW9n0j-vpM5YNLPOTlXsllhFargAGxGISWR7tBM-q0ufPVqp7BjMoPHEaAoWoEALw_wcB



database details
****************

database name : ngmrngbatch

collection name : products

password : admin

url : mongodb+srv://admin:admin@06-ng-11am.bskgx.mongodb.net/ngmrngbatch?retryWrites=true&w=majority


NodeJS
******
	- NodeJS is the "backend" technology

	- we will implement NodeJS applications with the help of JavaScript

	- NodeJS, used to develop servers.

	- NodeJS, supports the libraries

1) express

		express library used to develop the "rest api's"

		Ex.
				GET

				POST

				PUT

				DELETE


2) mongodb

	mongodb library used to connect to mongodb database


3) cors

	cors library used to enable the ports communication



we will download above libraries with the help of "yarn" tool

above libraries downloads to "node_modules" folder in Current location


=> create the directory

Ex.
	backend

=> switch to backend directory

	> cd backend

=> download the node modules / libraries

	1) express

	2) mongodb

	3) cors

	> yarn add express mongodb cors

=> implement the backend application

	Ex.
		server.js

=> start the node server

	> node server


=> test the rest api by using Postman

	http://localhost:8080/products

hosting backend in aws server
*****************************

1) push code to github repository


2) create the application in "aws" server

	Elastic BeanStalk

3) link the github repository to Elastic BeanStalk

	CodePipeline

4) get the cloud url from Elastic BeanStalk

	URL : http://Ngbackend-env.eba-wcjaif5k.us-east-2.elasticbeanstalk.com/products




frontend application
********************


1) create angular application

	> ng new frontend


frontend application deployment
*******************************

1) download and install aws cli tool

	aws cli tool, used to push application to aws server


website : https://aws.amazon.com/cli/

file    : AWSCLIV2.msi


2) prepare the angular production build

	> ng build --prod=true

		if production build success, automatically "dist" folder ready


3) push dist folder to s3 bucket

	1) properties  (static website hosting)

	2) permissions   (edit the bucket policy)

	{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::ngmrngbatch/*"
        }
    ]
}





4) create the Security Credential to our application

	IAM

5) modify the package.json file

	"aws-deploy":"aws s3 sync dist/frontend/ s3://ngmrngbatch"


6) execute the following commands

	=> aws configure

	=> ng build && npm run aws-deploy


7) get the cloud url from static website hosting

	URL : http://ngmrngbatch.s3-website.us-east-2.amazonaws.com






Pipes
*****
	Pipes are used to "custimize" the data accroding to end user requirement.

	we have "two" types of pipes

	1) Predefined Pipes

	2) custom pipes

	pipes given by "angular" framework called as Predefined Pipes.

	pipes "developed" by us based on application requirement called as custom pipes



Directives
**********
	Directives are used to enhance the "view" capabilities.

	we have two types of Directives

	1) Predefined Directives

	2) Custom Directives

	The Directives given by "angular" framework called as "Predefined" Directives

	The Directives developed by us based on application requirement called as "Custom" Directives.


Predefined Directives
*********************
1) Attribute Type Directives

2) event type directives

3) Structural Directives


	- in general event based directives surrounder with ()

	Ex.
			(click)

			(dblclick)

			(ngSubmit)


Ex.
	(click)

	(dblclick)

	[(ngModel)]

	*ngIf

	[ngStyle]

	[ngClass]

	*ngFor

	[ngSwitch]

	(ngSubmit)






Life Cycle Hooks
****************
	- every angular component containes life cycle hooks.


	- component containes two phases

			1) bootstrap phases


			2) updation phase


1) constructor

	- constructor will execute at bootstrap phase

	- constructor used to implement the dependency injection

	- making availability of directives, pipes and services to components at bootstrap phase called as dependency injection


2) ngOnChanges

	- in general parent component shares the data to child component with the help of @Input() directive.

	- if any change detected in @Input() variable, then this life cycle hook will execute.

	- ngOnChanges life cycle hook will execute at updation phase



4) ngDoCheck


	- if any change detected in directives then this life cycle hook will execute




communication between components
********************************
	angular applications are Component based.

	as a angular developer, we can create more than one component.

	as a angular developer we can provide communication between components

	we can provide communication in 4 ways.

		1) @Input()

		2) @Output()

		3) @ViewChild()

		4) @ViewChildren()

	- @Input() used to share the data from parent component to child component

	- @Output() used to share the data from child component to parent component




Life Cycle Hooks
****************

1) ngOnChanges()

	- if any change detected in @Input(), automatically this life cycle hook will execute


2) ngDoCheck()

	- if any changes detected in directive level, automatically ngDoCheck life cycle hook will execute


3) constructor()

	- constructor will execute at booting time

	- constructor mainly for dependency injection

	Ex.
		creating the object to services
							   pipes
							   directives
							   --
							   --
							   --
4) ngOnInit()

	- ngOnInit called as first life cycle" hook
	- ngOnInit life cycle hook, used to write the main "business" logic
	- ngOnInit will execute only once







Single Page Applications
************************

	- loading one component to another component without refreshing whole webpage called as single page application

	- navigation of components in single page application called as Routing

	- we will implement Routing with the help of Routes class

	- Routes class availabile in RouterModule

	- Routes and RouterModule availabile in @angular/router package

1) create the angular application

	> ng new spaDemo1


2) switch to angular application

	> cd spaDemo1


3) create the components

	> ng g c master --skip-tests -is --selector=master --flat true

	> ng g c pageone --skip-tests -is --selector=pageone --flat true

	> ng g c pagetwo --skip-tests -is --selector=pagetwo --flat true

	> ng g c pagethree --skip-tests -is --selector=pagethree --flat true


	where MasterComponent is the main component

	where PageoneComponent, PagetwoComponent and PagethreeComponents are target components



4) implement the business logic in target components



5) create the router links

	master.component.html


6) implement the Routing

	app.module.ts



Nested Routing
**************

1) create the components

	> ng g c childone --skip-tests -is --selector=childone --flat true

	> ng g c childtwo --skip-tests -is --selector=childtwo --flat true

	> ng g c childthree --skip-tests -is --selector=childthree --flat true


2) implement the business logic in child components


3) create the router links

4) implement the routing


Authentication Gurds
********************

1) CanActivate

	- used to perform the Authentication while entering main routes



2) CanDeactivate

	- used to perform the Authentication while leaving the main routes


3) CanActivateChild

	- used to perform the Authentication while entering child routes



Note : we will implement Authentication Guards with the help of services


******************************************
spaDemo1
        src   
		   app
		      auth
				 auth.service.ts
*****************************************

Lazy Loading
*************
	- skip the heavy modules loading at booting time called as Lazy Loading



1) create the components

2) create the module

3) implement the Routing

4) implement the Auth (CanLoad)


step 1.
 create the project


step 2.
	create the Components


	1) MasterComponent

	2) PageoneComponent

step 3.
	implement the "CustomersModule"


	=> customers.component.ts
	   customers.component.html


	   customers.service.ts


	   customers.module.ts


































	































































































































































































































































































































































































































































































